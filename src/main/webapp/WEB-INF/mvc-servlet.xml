<?xml version="1.0" encoding="UTF-8"?>
<beans
    xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
    http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-4.0.xsd
    http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">

    <!-- ①：对web包中的所有类进行扫描，以完成Bean创建和自动依赖注入的功能 -->
    <context:component-scan base-package="com.zhongchou.common"/>
	<mvc:annotation-driven />
	<!--aop执行操作的类-->
	<!-- <aop:aspectj-autoproxy proxy-target-class="true" />
	<bean id="LogAop" class="com.zhongchou.common.log.LogAop"/> -->

	  <!-- ②：启动Spring MVC的注解功能，完成请求和注解POJO的映射 -->
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"/>

    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"/>
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
      <!--   <property name="messageConverters">
            <list>
                <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"/>
            </list>
        </property> -->
    </bean>


	<!-- <mvc:default-servlet-handler/> -->
	<!-- <mvc:resources mapping="/js/**" location="/views/static/js/" />
	<mvc:resources mapping="/images/**" location="/views/static/images/" />
	<mvc:resources mapping="/views/**" location="/views/" />-->
	<!-- 定义跳转的文件的前后缀 ，视图模式配置-->
	 <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!--这里的配置是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址-->
		<property name="prefix" value="/views/" />
		<property name="suffix" value=".html" />
	</bean>
	<!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!--默认编码 -->
        <property name="defaultEncoding" value="utf-8" />
		<!-- 文件大小最大值 -->
        <property name="maxUploadSize" value="10485760000" />
		<!--  内存中的最大值 -->
        <property name="maxInMemorySize" value="40960" />
    </bean>


	<!--定义异常处理页面
    <bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                <prop key="java.lang.Exception">error/system_error</prop>
            </props>
        </property>
    </bean>-->

<!--
	<bean id="exceptionHandler" class="com.zhongchou.common.log.AspectService" />

     <aop:config>
         <aop:aspect ref="exceptionHandler">
             <aop:pointcut id="exceptionService" expression="execution(* com.zhongchou.common..*(..))" />
             <aop:after-throwing pointcut-ref="exceptionService" method="afterThrowing" throwing="e" />
         </aop:aspect>
     </aop:config> -->


<!-- 激活自动代理功能 -->
    <aop:aspectj-autoproxy proxy-target-class="true"/>
    <!-- 系统服务组件的切面Bean -->
    <bean id="aspectService" class="com.zhongchou.common.log.AspectService"></bean>
    <!-- AOP配置 -->
    <aop:config>
        <!-- 声明一个切面,并注入切面Bean,相当于@Aspect -->
        <aop:aspect id="simpleAspect" ref="aspectService">
            <!-- 配置一个切入点,相当于@Pointcut -->
            <aop:pointcut expression="execution(* com.zhongchou.common..*(..))" id="simplePointcut"/>
            <aop:after-throwing pointcut-ref="simplePointcut" method="afterThrow" throwing="ex"/>
        </aop:aspect>
    </aop:config>

    <!-- 拦截器配置 -->
	<mvc:interceptors>
	        <!-- 配置Token拦截器，防止用户重复提交数据 -->
	        <mvc:interceptor>
	            <mvc:mapping path="/**"/><!--这个地方时你要拦截得路径 我这个意思是拦截所有得URL-->
	            <bean class="com.zhongchou.common.filter.TokenInterceptor"/><!--class文件路径改成你自己写得拦截器路径！！ -->
	        </mvc:interceptor>
	</mvc:interceptors>
</beans>
